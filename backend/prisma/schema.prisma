// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @unique @map("name")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  UserRole  UserRole[]
  GroupRole GroupRole[]
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  emailConfirm   Boolean?  @map("confirm_email") @default(false)
  firstname String?     @map("firstname")
  lastname  String?     @map("lastname")
  password  String?     @map("password_hash")
  phone     String?     @unique @map("phone_number")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  profile   String?     @map("image_url")
  userRole  UserRole[]
  shops     Shops[]
  orders    Order[]
  UserGroup UserGroup[]

  @@map("users")
}

model UserRole {
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Shops {
  id        Int       @id @default(autoincrement())
  name      String    @map("name")
  address   String    @map("location")
  phone     String    @map("phone_number")
  userId    Int       @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[]

  @@map("shops")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @map("name") @db.VarChar(100)
  price       Float    @map("price") @db.Real
  quantity    Int      @map("quantity")
  isAvailable Boolean  @default(true) @map("is_available")
  shopId      Int      @map("shop_id")
  image       String?  @map("image_url") @db.VarChar(255)
  description String?  @map("description") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  shop            Shops             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  OrderItem       OrderItem[]
  ProductCategory ProductCategory[]

  @@map("products")
}

 enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int         @map("user_id")
  totalAmount Float       @map("total_amount") @db.Real
  status      OrderStatus @default(PENDING) @map("status")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem OrderItem[]
  Payment   Payment[]
  Delivery  Delivery[]

  @@map("orders")
}

model OrderItem {
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int      @map("quantity")
  price     Float    @map("price") @db.Real
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
  @@map("order_items")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @map("order_id")
  amount    Float         @map("amount") @db.Real
  status    PaymentStatus @default(PENDING) @map("status")
  method    PaymentMethod @default(CASH) @map("method")
  createdAt DateTime      @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum DeliveryStatus {
  PENDING
  INTRANSIT
  DELIVERED
  CANCELLED
}

model Delivery {
  id              Int            @id @default(autoincrement())
  orderId         Int            @map("order_id")
  status          DeliveryStatus @default(PENDING) @map("status")
  deliveryAddress String         @map("delivery_address")
  deliveryDate    DateTime?      @map("delivery_date")
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("deliveries")
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique @map("name")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  ProductCategory ProductCategory[]
}

model ProductCategory {
  productId  Int @map("product_id")
  categoryId Int @map("category_id")

  product  Product  @relation(fields: [productId], references: [id], onUpdate: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Group {
  id        Int         @id @default(autoincrement())
  name      String      @unique @map("name")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  GroupRole GroupRole[]
  UserGroup UserGroup[]
}

model GroupRole {
  groupId Int @map("group_id")
  roleId  Int @map("role_id")

  group Group @relation(fields: [groupId], references: [id], onUpdate: Cascade)
  role  Role  @relation(fields: [roleId], references: [id])

  @@id([groupId, roleId])
  @@map("group_roles")
}

model UserGroup {
  userId  Int @map("user_id")
  groupId Int @map("group_id")

  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade)
  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@map("user_groups")
}
